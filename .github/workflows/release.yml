name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Run tests
      run: go test ./...

    - name: Build releases
      run: |
        mkdir -p dist
        
        # Build for different platforms
        platforms=(
          "linux/amd64"
          "linux/arm64"
          "darwin/amd64"
          "darwin/arm64"
          "windows/amd64"
        )
        
        for platform in "${platforms[@]}"; do
          GOOS=${platform%/*}
          GOARCH=${platform#*/}
          
          echo "Building for $GOOS/$GOARCH..."
          
          if [ "$GOOS" = "windows" ]; then
            BINARY_NAME="vaultfile-${GOOS}-${GOARCH}.exe"
          else
            BINARY_NAME="vaultfile-${GOOS}-${GOARCH}"
          fi
          
          env GOOS=$GOOS GOARCH=$GOARCH go build -ldflags="-s -w" -o dist/$BINARY_NAME ./cmd/vaultfile
          
          # Create archive
          if [ "$GOOS" = "windows" ]; then
            cd dist && zip "vaultfile-${GOOS}-${GOARCH}.zip" $BINARY_NAME && cd ..
          else
            cd dist && tar -czf "vaultfile-${GOOS}-${GOARCH}.tar.gz" $BINARY_NAME && cd ..
          fi
        done

    - name: Generate changelog
      id: changelog
      run: |
        # Get the latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -z "$LATEST_TAG" ]; then
          # First release, get all commits
          CHANGELOG=$(git log --pretty=format:"* %s" --no-merges)
        else
          # Get commits since last tag
          CHANGELOG=$(git log ${LATEST_TAG}..HEAD --pretty=format:"* %s" --no-merges)
        fi
        
        # Save changelog to output
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        name: Release ${{ github.ref_name }}
        body: |
          ## What's Changed
          
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## Installation
          
          ### Using Go Install
          ```bash
          go install neonll.com/vaultfile-go/cmd/vaultfile@${{ github.ref_name }}
          ```
          
          ### Download Binary
          Download the appropriate binary for your platform from the assets below.
          
          ## Checksums
          
          SHA256 checksums are provided for all binaries to verify integrity.
        files: |
          dist/vaultfile-*.tar.gz
          dist/vaultfile-*.zip
        generate_release_notes: true
        draft: false
        prerelease: false